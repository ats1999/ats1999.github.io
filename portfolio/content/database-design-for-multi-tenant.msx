---
title: "Choosing a database design for multi tenant application!"
publishedAt: "2025-06-05"
summary: "Multi tenant applications are very common now days. They allows business to host same source code for multiple customers in single infrastructure, it provides benefits of data isolation and security. There are multiple ways we can design databases for multi tenant application. Each design decision influences, data isolation, security, scalability and maintenance cost. In this blog, we'll learn different approaches of multi tenant database design."
---

> We'll use PostgreSQL example throughout the blog, but the concepts can be applied to any database.

## What is multi tenancy?

The term `tenant` is not new and not tied to software development. You'll get something similar when you just type `tenant` on [google.com](https://google.com)

> `tenant`: a person who pays money (rent) to the owner of a room, flat, building or piece of land so that he/she can live in it or use it

Similarly, in software development, multi applications are developed and deployed by a single entity. Customers can use the deployment by paying required fees.

Some notable example are:

- White labeled blog applications - [hashnode.com](https://hashnode.com/)
- Salesforce
- Slack
- Shopify

## Database Design Choices

We have mainly three database design choices, each have their own pros/cons.
Each design decision influences, data isolation, security, scalability and maintenance cost.

1. Database Per Tenant
2. Schema Per Tenant
3. Discriminator Column in every table

![Alt text](/images/multi-tenant.png)

Let's explore every option in details

### Database Per Tenant

In this approach, we create a database for each tenant. This approach provides higher degree of isolation and data security. Due to separate database, efforts like maintenance, change in SQL schema, data migration, etc will be increased.

If we store all databases in single database server, then we'll end up having large number of connection pools from application to the single database server. It can cause performance bottleneck.

When should we use this approach:

- You already have single tenant app and you want to test multi tenant feature quickly.
- You are building a MVP and you don't want to deal with the application level complexity of other approaches.
- You have small number tenants (<=100) and they all have large database. Tenants with small database is not suitable.
- You need higher degree of security because you are storing very sensitive information like, trade secret, investment details, etc.

### ORM & Framework Support

- [hibernate](https://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/ch16.html)
- [Spring-Boot](https://spring.io/blog/2022/07/31/how-to-integrate-hibernates-multitenant-feature-with-spring-data-jpa-in-a-spring-boot-application)
- [Prisma](https://github.com/prisma/prisma/discussions/2846)

### Schema Per Tenant

In this approach, each tenant gets its own database schema within a single shared database. A schema acts as a namespace that holds all the tenant's database objects—such as tables, indexes, and sequences—separately from other tenants. This ensures a strong level of logical isolation while still using a single database instance.

From a design perspective, this approach is somewhat similar to the Database Per Tenant model, but with significantly lower infrastructure overhead. Since all schemas live within the same database, you can reuse a shared connection pool, reducing the cost of maintaining multiple database connections.

However, it's important to note that not all relational databases support schemas in the same way. PostgreSQL and SQL Server support schemas well, while MySQL has limited support.

When should we use this approach:

- When your customers are comfortable storing their data alongside other tenants in the same database.
- When you have a small to medium number of tenants (typically fewer than 10,000). A large number of schemas can increase memory usage and potentially create performance bottlenecks.
- Your database supports schemas well (e.g., PostgreSQL, SQL Server).
- You want to run tenant-specific backups or migrations independently.

### ORM & Framework Support

- [hibernate](https://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/ch16.html)
- [Spring-Boot](https://spring.io/blog/2022/07/31/how-to-integrate-hibernates-multitenant-feature-with-spring-data-jpa-in-a-spring-boot-application)

### Discriminator Column

In this approach, we add a `tenant_id` column in every table to identity rows belongs to the tenant.

| col_1 | col_2  | tenant_id |
| ----- | ------ | --------- |
| Row 1 | Data   | 1         |
| Row 2 | Values | 2         |

This approach have lower degree of data isolation and security, but higher degree of scalability than other two approaches. It significantly reduces maintenance effort and schema migration overheads, at the same time it increases development efforts.

In this approach data isolation provided by the application layer, so queries needs to be designed carefully.

### When should we use this approach?

- When your customers are comfortable storing their data alongside other tenants in the same database.
- When you have enough time to put in additional development effort.

### ORM & Framework Support

- [hibernate](https://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/ch16.html)
- [Spring-Boot](https://spring.io/blog/2022/07/31/how-to-integrate-hibernates-multitenant-feature-with-spring-data-jpa-in-a-spring-boot-application)
- [Prisma](https://github.com/prisma/prisma/discussions/2846)
