---
title: "Choosing a database design for multi tenant application!"
publishedAt: "2025-06-05"
summary: "Multi tenant applications are very common now days. They allows business to host same source code for multiple customers in single infrastructure, it provides benefits of data isolation and security. There are multiple ways we can design databases for multi tenant application. Each design decision influences, data isolation, security, scalability and maintenance cost. In this blog, we'll learn different approaches of multi tenant database design."
---

> We'll use PostgreSQL example throughout the blog, but the concepts can be applied to any database.

## What is multi tenancy?

The term `tenant` is not new and not tied to software development. You'll get something similar when you just type `tenant` on [google.com](https://google.com)

> `tenant`: a person who pays money (rent) to the owner of a room, flat, building or piece of land so that he/she can live in it or use it

Similarly, in software development, multi applications are developed and deployed by a single entity. Customers can use the deployment by paying required fees.

Some notable example are:

- White labeled blog applications - [hashnode.com](https://hashnode.com/)
- Salesforce
- Slack
- Shopify

## Database Design Choices

We have mainly three database design choices, each have their own pros/cons.
Each design decision influences, data isolation, security, scalability and maintenance cost.

1. Database Per Tenant
2. Schema Per Tenant
3. Discriminator column in every table

Let's explore every option in details

### Database Per Tenant

In this approach, we create a database for each tenant. This approach provides higher degree of isolation and data security. Due to separate database, efforts like maintenance, change in SQL schema, data migration, etc will be increased.

If we store all databases in single database server, then we'll end up having large number of connection pools from application to the single database server. It can cause performance bottleneck.

When should we use this approach:

- You already have single tenant app and you want to test multi tenant feature quickly.
- You are building a MVP and you don't want to deal with the application level complexity of other approaches.
- You have small number tenants (<=100) and they all have large database. Tenants with small database is not suitable.
- You need higher degree of security because you are storing very sensitive information like, trade secret, investment details, etc.

### Schema Per Tenant
Schema 


The concept of schema does not exist in every database. 